/**
 * CoinGecko Public API V3
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SimplePrice200Response } from '../model/simple-price200-response';
import { SimpleTokenPrice200Response } from '../model/simple-token-price200-response';
import { Configuration } from '../configuration';
export declare class SimpleService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Coin Price by IDs
     * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**.
     * @param ids coins\&#39; ids, comma-separated if querying more than 1 coin.  &lt;br&gt;*refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrencies target currency of coins, comma-separated if querying more than 1 currency.  &lt;br&gt;*refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param includeMarketCap include market cap, default: false
     * @param include24hrVol include 24hr volume, default: false
     * @param include24hrChange include 24hr change, default: false
     * @param includeLastUpdatedAt include last updated price time in UNIX, default: false
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<SimplePrice200Response>;
    simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<SimplePrice200Response>>;
    simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<SimplePrice200Response>>;
    /**
     * Supported Currencies List
     * This endpoint allows you to **query all the supported currencies on CoinGecko**.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    simpleSupportedCurrencies(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<Array<string>>;
    simpleSupportedCurrencies(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<Array<string>>>;
    simpleSupportedCurrencies(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<Array<string>>>;
    /**
     * Coin Price by Token Addresses
     * This endpoint allows you to **query a token price by using token contract address**.
     * @param id asset platform\&#39;s id  &lt;br&gt;*refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param contractAddresses the contract address of a token
     * @param vsCurrencies target currency of coins, comma-separated if querying more than 1 currency.  &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param includeMarketCap include market capitalization, default: false
     * @param include24hrVol include 24hr volume, default: false
     * @param include24hrChange include 24hr change  default: false
     * @param includeLastUpdatedAt include last updated price time in UNIX , default: false
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<SimpleTokenPrice200Response>;
    simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<SimpleTokenPrice200Response>>;
    simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<SimpleTokenPrice200Response>>;
}
