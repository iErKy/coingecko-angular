/**
 * CoinGecko Public API V3
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CoinsHistoricalData } from '../model/coins-historical-data';
import { CoinsID } from '../model/coins-id';
import { CoinsListInner } from '../model/coins-list-inner';
import { CoinsMarketChart } from '../model/coins-market-chart';
import { CoinsMarketChartRange } from '../model/coins-market-chart-range';
import { CoinsMarkets } from '../model/coins-markets';
import { CoinsTickers } from '../model/coins-tickers';
import { Configuration } from '../configuration';
export declare class CoinsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Coin Data by ID
     * This endpoint allows you to **query all the coin data of a coin (name, price, market .... including exchange tickers) on CoinGecko coin page based on a particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param localization include all the localized languages in the response, default: true
     * @param tickers include tickers data, default: true
     * @param marketData include market data, default: true
     * @param communityData include community data, default: true
     * @param developerData include developer data, default: true
     * @param sparkline include sparkline 7 days data, default: false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<CoinsID>;
    coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<CoinsID>>;
    coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<CoinsID>>;
    /**
     * Coin Historical Data by ID
     * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, etc) at a given date for a coin based on a particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param date the date of data snapshot &lt;br&gt; Format: &#x60;dd-mm-yyyy&#x60;
     * @param localization include all the localized languages in response, default: true
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsIdHistory(id: string, date: string, localization?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<CoinsHistoricalData>;
    coinsIdHistory(id: string, date: string, localization?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<CoinsHistoricalData>>;
    coinsIdHistory(id: string, date: string, localization?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<CoinsHistoricalData>>;
    /**
     * Coin Historical Chart Data by ID
     * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hrs volume based on particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param days data up to number of days ago &lt;br&gt; you may use any integer for number of days
     * @param interval data interval, leave empty for auto granularity Possible value: daily
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<CoinsMarketChart>;
    coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<CoinsMarketChart>>;
    coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<CoinsMarketChart>>;
    /**
     * Coin Historical Chart Data within Time Range by ID
     * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hrs volume based on particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param from starting date in UNIX timestamp
     * @param to ending date in UNIX timestamp
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<CoinsMarketChartRange>;
    coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<CoinsMarketChartRange>>;
    coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<CoinsMarketChartRange>>;
    /**
     * Coin OHLC Chart by ID
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrency target currency of price data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param days data up to number of days ago
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<Array<Array<number>>>;
    coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<Array<Array<number>>>>;
    coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<Array<Array<number>>>>;
    /**
     * Coin Tickers by ID
     * This endpoint allows you to **query the coin tickers on both centralized exchange (cex) and decentralized exchange (dex) based on a particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param exchangeIds exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param includeExchangeLogo include exchange logo, default: false
     * @param page page through results
     * @param order use this to sort the order of responses, default: trust_score_desc
     * @param depth include 2% orderbook depth, ie. &#x60;cost_to_move_up_usd&#x60; and &#x60;cost_to_move_down_usd&#x60; &lt;br&gt; default: false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<CoinsTickers>;
    coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<CoinsTickers>>;
    coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<CoinsTickers>>;
    /**
     * Coins List (ID Map)
     * This endpoint allows you to **query all the supported coins on CoinGecko with coins id, name and symbol**.
     * @param includePlatform include platform and token\&#39;s contract addresses, default: false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsList(includePlatform?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<Array<CoinsListInner>>;
    coinsList(includePlatform?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<Array<CoinsListInner>>>;
    coinsList(includePlatform?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<Array<CoinsListInner>>>;
    /**
     * Coins List with Market Data
     * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**.
     * @param vsCurrency target currency of coins and market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param ids coins\&#39; ids, comma-separated if querying more than 1 coin.  &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param category filter based on coins\&#39; category &lt;br&gt; *refers to [&#x60;/coins/categories/list&#x60;](/reference/coins-categories-list).
     * @param order sort result by field, default: market_cap_desc
     * @param perPage total results per page, default: 100 &lt;br&gt; Valid values: 1...250
     * @param page page through results, default: 1
     * @param sparkline include sparkline 7 days data, default: false
     * @param priceChangePercentage include price change percentage timeframe, comma-separated if query more than 1 price change percentage timeframe &lt;br&gt; Valid values: 1h, 24h, 7d, 14d, 30d, 200d, 1y
     * @param locale language background, default: en
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<CoinsMarkets>;
    coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<CoinsMarkets>>;
    coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<CoinsMarkets>>;
}
