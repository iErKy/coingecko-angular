/**
 * CoinGecko Public API V3
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ExchangeData } from '../model/exchange-data';
import { ExchangeTickers } from '../model/exchange-tickers';
import { Exchanges } from '../model/exchanges';
import { ExchangesList } from '../model/exchanges-list';
import { Configuration } from '../configuration';
export declare class ExchangesService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Exchanges List with data
     * This endpoint allows you to **query all the supported exchanges with exchanges’ data (id, name, country, .... etc) that have active trading volumes on CoinGecko**.
     * @param perPage total results per page, default: 100 &lt;br&gt; Valid values: 1...250
     * @param page page through results, default: 1
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exchanges(perPage?: number, page?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<Exchanges>;
    exchanges(perPage?: number, page?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<Exchanges>>;
    exchanges(perPage?: number, page?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<Exchanges>>;
    /**
     * Exchange Data by ID
     * This endpoint allows you to **query exchange’s data (name, year established, country, .... etc), exchange volume in BTC and top 100 tickers based on exchange’s id**.
     * @param id exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exchangesId(id: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<ExchangeData>;
    exchangesId(id: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<ExchangeData>>;
    exchangesId(id: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<ExchangeData>>;
    /**
     * Exchange Tickers by ID
     * This endpoint allows you to **query exchange\&#39;s tickers based on exchange’s id**.
     * @param id exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param coinIds filter tickers by coin_ids, comma-separated if querying more than 1 coin &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param includeExchangeLogo include exchange logo, default: false
     * @param page page through results
     * @param depth include 2% orderbook depth (Example: cost_to_move_up_usd &amp; cost_to_move_down_usd),default: false
     * @param order use this to sort the order of responses, default: trust_score_desc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exchangesIdTickers(id: string, coinIds?: string, includeExchangeLogo?: boolean, page?: number, depth?: boolean, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<ExchangeTickers>;
    exchangesIdTickers(id: string, coinIds?: string, includeExchangeLogo?: boolean, page?: number, depth?: boolean, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<ExchangeTickers>>;
    exchangesIdTickers(id: string, coinIds?: string, includeExchangeLogo?: boolean, page?: number, depth?: boolean, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<ExchangeTickers>>;
    /**
     * Exchange Volume Chart by ID
     * This endpoint allows you to **query the historical volume chart data with time in UNIX and trading volume data in BTC based on exchange’s id**.
     * @param id exchange id or derivatives exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list) or [&#x60;/derivatives/exchanges/list&#x60;](/reference/derivatives-exchanges-list).
     * @param days data up to number of days ago
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exchangesIdVolumeChart(id: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<Array<Array<number>>>;
    exchangesIdVolumeChart(id: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<Array<Array<number>>>>;
    exchangesIdVolumeChart(id: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<Array<Array<number>>>>;
    /**
     * Exchanges List (ID Map)
     * This endpoint allows you to **query all the exchanges with id and name**.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exchangesList(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<ExchangesList>;
    exchangesList(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpResponse<ExchangesList>>;
    exchangesList(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
        transferCache?: boolean;
    }): Observable<HttpEvent<ExchangesList>>;
}
