/**
 * CoinGecko Public API V3
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CoinsHistoricalData } from '../model/coins-historical-data';
// @ts-ignore
import { CoinsID } from '../model/coins-id';
// @ts-ignore
import { CoinsListInner } from '../model/coins-list-inner';
// @ts-ignore
import { CoinsMarketChart } from '../model/coins-market-chart';
// @ts-ignore
import { CoinsMarketChartRange } from '../model/coins-market-chart-range';
// @ts-ignore
import { CoinsMarkets } from '../model/coins-markets';
// @ts-ignore
import { CoinsTickers } from '../model/coins-tickers';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { CoinGeckoConfiguration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class CoinsService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: CoinGeckoConfiguration) {
        super(basePath, configuration);
    }

    /**
     * Coin Data by ID
     * This endpoint allows you to **query all the coin data of a coin (name, price, market .... including exchange tickers) on CoinGecko coin page based on a particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param localization include all the localized languages in the response, default: true
     * @param tickers include tickers data, default: true
     * @param marketData include market data, default: true
     * @param communityData include community data, default: true
     * @param developerData include developer data, default: true
     * @param sparkline include sparkline 7 days data, default: false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsID>;
    public coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsID>>;
    public coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsID>>;
    public coinsId(id: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsId.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>localization, 'localization');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>tickers, 'tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>marketData, 'market_data');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>communityData, 'community_data');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>developerData, 'developer_data');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sparkline, 'sparkline');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<CoinsID>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Historical Data by ID
     * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, etc) at a given date for a coin based on a particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param date the date of data snapshot &lt;br&gt; Format: &#x60;dd-mm-yyyy&#x60;
     * @param localization include all the localized languages in response, default: true
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsIdHistory(id: string, date: string, localization?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsHistoricalData>;
    public coinsIdHistory(id: string, date: string, localization?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsHistoricalData>>;
    public coinsIdHistory(id: string, date: string, localization?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsHistoricalData>>;
    public coinsIdHistory(id: string, date: string, localization?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsIdHistory.');
        }
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling coinsIdHistory.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>date, 'date');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>localization, 'localization');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/history`;
        return this.httpClient.request<CoinsHistoricalData>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Historical Chart Data by ID
     * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hrs volume based on particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param days data up to number of days ago &lt;br&gt; you may use any integer for number of days
     * @param interval data interval, leave empty for auto granularity Possible value: daily
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsMarketChart>;
    public coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsMarketChart>>;
    public coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsMarketChart>>;
    public coinsIdMarketChart(id: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsIdMarketChart.');
        }
        if (vsCurrency === null || vsCurrency === undefined) {
            throw new Error('Required parameter vsCurrency was null or undefined when calling coinsIdMarketChart.');
        }
        if (days === null || days === undefined) {
            throw new Error('Required parameter days was null or undefined when calling coinsIdMarketChart.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>vsCurrency, 'vs_currency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>days, 'days');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>interval, 'interval');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>precision, 'precision');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/market_chart`;
        return this.httpClient.request<CoinsMarketChart>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Historical Chart Data within Time Range by ID
     * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hrs volume based on particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param from starting date in UNIX timestamp 
     * @param to ending date in UNIX timestamp
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsMarketChartRange>;
    public coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsMarketChartRange>>;
    public coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsMarketChartRange>>;
    public coinsIdMarketChartRange(id: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsIdMarketChartRange.');
        }
        if (vsCurrency === null || vsCurrency === undefined) {
            throw new Error('Required parameter vsCurrency was null or undefined when calling coinsIdMarketChartRange.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling coinsIdMarketChartRange.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling coinsIdMarketChartRange.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>vsCurrency, 'vs_currency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>from, 'from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>to, 'to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>precision, 'precision');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/market_chart/range`;
        return this.httpClient.request<CoinsMarketChartRange>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin OHLC Chart by ID
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrency target currency of price data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param days data up to number of days ago 
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<Array<number>>>;
    public coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<Array<number>>>>;
    public coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<Array<number>>>>;
    public coinsIdOhlc(id: string, vsCurrency: string, days: '1' | '7' | '14' | '30' | '90' | '180' | '365', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsIdOhlc.');
        }
        if (vsCurrency === null || vsCurrency === undefined) {
            throw new Error('Required parameter vsCurrency was null or undefined when calling coinsIdOhlc.');
        }
        if (days === null || days === undefined) {
            throw new Error('Required parameter days was null or undefined when calling coinsIdOhlc.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>vsCurrency, 'vs_currency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>days, 'days');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>precision, 'precision');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/ohlc`;
        return this.httpClient.request<Array<Array<number>>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Tickers by ID
     * This endpoint allows you to **query the coin tickers on both centralized exchange (cex) and decentralized exchange (dex) based on a particular coin id**.
     * @param id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param exchangeIds exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param includeExchangeLogo include exchange logo, default: false
     * @param page page through results
     * @param order use this to sort the order of responses, default: trust_score_desc
     * @param depth include 2% orderbook depth, ie. &#x60;cost_to_move_up_usd&#x60; and &#x60;cost_to_move_down_usd&#x60; &lt;br&gt; default: false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsTickers>;
    public coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsTickers>>;
    public coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsTickers>>;
    public coinsIdTickers(id: string, exchangeIds?: string, includeExchangeLogo?: boolean, page?: number, order?: 'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc', depth?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsIdTickers.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exchangeIds, 'exchange_ids');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeExchangeLogo, 'include_exchange_logo');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>order, 'order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>depth, 'depth');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/tickers`;
        return this.httpClient.request<CoinsTickers>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coins List (ID Map)
     * This endpoint allows you to **query all the supported coins on CoinGecko with coins id, name and symbol**.
     * @param includePlatform include platform and token\&#39;s contract addresses, default: false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsList(includePlatform?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<CoinsListInner>>;
    public coinsList(includePlatform?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<CoinsListInner>>>;
    public coinsList(includePlatform?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<CoinsListInner>>>;
    public coinsList(includePlatform?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includePlatform, 'include_platform');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/list`;
        return this.httpClient.request<Array<CoinsListInner>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coins List with Market Data
     * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**.
     * @param vsCurrency target currency of coins and market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param ids coins\&#39; ids, comma-separated if querying more than 1 coin.  &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param category filter based on coins\&#39; category &lt;br&gt; *refers to [&#x60;/coins/categories/list&#x60;](/reference/coins-categories-list).
     * @param order sort result by field, default: market_cap_desc
     * @param perPage total results per page, default: 100 &lt;br&gt; Valid values: 1...250
     * @param page page through results, default: 1
     * @param sparkline include sparkline 7 days data, default: false
     * @param priceChangePercentage include price change percentage timeframe, comma-separated if query more than 1 price change percentage timeframe &lt;br&gt; Valid values: 1h, 24h, 7d, 14d, 30d, 200d, 1y
     * @param locale language background, default: en
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsMarkets>;
    public coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsMarkets>>;
    public coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsMarkets>>;
    public coinsMarkets(vsCurrency: string, ids?: string, category?: string, order?: 'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc', perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: string, locale?: 'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (vsCurrency === null || vsCurrency === undefined) {
            throw new Error('Required parameter vsCurrency was null or undefined when calling coinsMarkets.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>vsCurrency, 'vs_currency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ids, 'ids');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>category, 'category');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>order, 'order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>perPage, 'per_page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sparkline, 'sparkline');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>priceChangePercentage, 'price_change_percentage');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>locale, 'locale');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>precision, 'precision');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/markets`;
        return this.httpClient.request<CoinsMarkets>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
