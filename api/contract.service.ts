/**
 * CoinGecko Public API V3
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CoinsContractAddress } from '../model/coins-contract-address';
// @ts-ignore
import { CoinsMarketChart } from '../model/coins-market-chart';
// @ts-ignore
import { CoinsMarketChartRange } from '../model/coins-market-chart-range';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { CoinGeckoConfiguration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class ContractService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: CoinGeckoConfiguration) {
        super(basePath, configuration);
    }

    /**
     * Coin Data by Token Address
     * This endpoint allows you to **query all the coin data (name, price, market .... including exchange tickers) on CoinGecko coin page based on asset platform and particular token contract address**.
     * @param id asset platform id &lt;br&gt; *refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param contractAddress the contract address of token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coinsContractAddress(id: string, contractAddress: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsContractAddress>;
    public coinsContractAddress(id: string, contractAddress: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsContractAddress>>;
    public coinsContractAddress(id: string, contractAddress: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsContractAddress>>;
    public coinsContractAddress(id: string, contractAddress: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coinsContractAddress.');
        }
        if (contractAddress === null || contractAddress === undefined) {
            throw new Error('Required parameter contractAddress was null or undefined when calling coinsContractAddress.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/contract/${this.configuration.encodeParam({name: "contractAddress", value: contractAddress, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<CoinsContractAddress>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Historical Chart Data by Token Address
     * This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hrs volume based on asset platform and particular token contract address**.
     * @param id asset platform id &lt;br&gt; *refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param contractAddress the contract address of token
     * @param vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param days data up to number of days ago &lt;br&gt; you may use any integer for number of days
     * @param interval data interval, leave empty for auto granularity Possible value: daily
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractAddressMarketChart(id: string, contractAddress: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsMarketChart>;
    public contractAddressMarketChart(id: string, contractAddress: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsMarketChart>>;
    public contractAddressMarketChart(id: string, contractAddress: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsMarketChart>>;
    public contractAddressMarketChart(id: string, contractAddress: string, vsCurrency: string, days: string, interval?: 'daily', precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling contractAddressMarketChart.');
        }
        if (contractAddress === null || contractAddress === undefined) {
            throw new Error('Required parameter contractAddress was null or undefined when calling contractAddressMarketChart.');
        }
        if (vsCurrency === null || vsCurrency === undefined) {
            throw new Error('Required parameter vsCurrency was null or undefined when calling contractAddressMarketChart.');
        }
        if (days === null || days === undefined) {
            throw new Error('Required parameter days was null or undefined when calling contractAddressMarketChart.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>vsCurrency, 'vs_currency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>days, 'days');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>interval, 'interval');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>precision, 'precision');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/contract/${this.configuration.encodeParam({name: "contractAddress", value: contractAddress, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/market_chart`;
        return this.httpClient.request<CoinsMarketChart>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Historical Chart Data within Time Range by Token Address
     * This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hrs volume  based on asset platform and particular token contract address**.
     * @param id asset platform id &lt;br&gt; *refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list)
     * @param contractAddress the contract address of token
     * @param vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param from starting date in UNIX timestamp
     * @param to ending date in UNIX timestamp
     * @param precision decimal place for currency price value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractAddressMarketChartRange(id: string, contractAddress: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CoinsMarketChartRange>;
    public contractAddressMarketChartRange(id: string, contractAddress: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoinsMarketChartRange>>;
    public contractAddressMarketChartRange(id: string, contractAddress: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoinsMarketChartRange>>;
    public contractAddressMarketChartRange(id: string, contractAddress: string, vsCurrency: string, from: number, to: number, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling contractAddressMarketChartRange.');
        }
        if (contractAddress === null || contractAddress === undefined) {
            throw new Error('Required parameter contractAddress was null or undefined when calling contractAddressMarketChartRange.');
        }
        if (vsCurrency === null || vsCurrency === undefined) {
            throw new Error('Required parameter vsCurrency was null or undefined when calling contractAddressMarketChartRange.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling contractAddressMarketChartRange.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling contractAddressMarketChartRange.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>vsCurrency, 'vs_currency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>from, 'from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>to, 'to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>precision, 'precision');

        let localVarHeaders = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('apiKeyAuth', 'x-cg-demo-api-key', localVarHeaders);

        // authentication (apiKeyQueryParam) required
        localVarQueryParameters = this.configuration.addCredentialToQuery('apiKeyQueryParam', 'x_cg_demo_api_key', localVarQueryParameters);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/coins/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/contract/${this.configuration.encodeParam({name: "contractAddress", value: contractAddress, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/market_chart/range`;
        return this.httpClient.request<CoinsMarketChartRange>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
