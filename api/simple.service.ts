/**
 * CoinGecko Public API V3
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { SimplePrice200Response } from '../model/simple-price200-response';
// @ts-ignore
import { SimpleTokenPrice200Response } from '../model/simple-token-price200-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class SimpleService {

    protected basePath = 'https://api.coingecko.com/api/v3';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Coin Price by IDs
     * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**.
     * @param ids coins\&#39; ids, comma-separated if querying more than 1 coin.  &lt;br&gt;*refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param vsCurrencies target currency of coins, comma-separated if querying more than 1 currency.  &lt;br&gt;*refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param includeMarketCap include market cap, default: false 
     * @param include24hrVol include 24hr volume, default: false
     * @param include24hrChange include 24hr change, default: false
     * @param includeLastUpdatedAt include last updated price time in UNIX, default: false
     * @param precision decimal place for currency price value 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SimplePrice200Response>;
    public simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SimplePrice200Response>>;
    public simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SimplePrice200Response>>;
    public simplePrice(ids: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling simplePrice.');
        }
        if (vsCurrencies === null || vsCurrencies === undefined) {
            throw new Error('Required parameter vsCurrencies was null or undefined when calling simplePrice.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids !== undefined && ids !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ids, 'ids');
        }
        if (vsCurrencies !== undefined && vsCurrencies !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>vsCurrencies, 'vs_currencies');
        }
        if (includeMarketCap !== undefined && includeMarketCap !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeMarketCap, 'include_market_cap');
        }
        if (include24hrVol !== undefined && include24hrVol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>include24hrVol, 'include_24hr_vol');
        }
        if (include24hrChange !== undefined && include24hrChange !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>include24hrChange, 'include_24hr_change');
        }
        if (includeLastUpdatedAt !== undefined && includeLastUpdatedAt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeLastUpdatedAt, 'include_last_updated_at');
        }
        if (precision !== undefined && precision !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>precision, 'precision');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyQueryParam) required
        localVarCredential = this.configuration.lookupCredential('apiKeyQueryParam');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('x_cg_demo_api_key', localVarCredential);
        }

        // authentication (apiKeyAuth) required
        localVarCredential = this.configuration.lookupCredential('apiKeyAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-cg-demo-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/simple/price`;
        return this.httpClient.request<SimplePrice200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Supported Currencies List
     * This endpoint allows you to **query all the supported currencies on CoinGecko**.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public simpleSupportedCurrencies(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<string>>;
    public simpleSupportedCurrencies(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<string>>>;
    public simpleSupportedCurrencies(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<string>>>;
    public simpleSupportedCurrencies(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyQueryParam) required
        localVarCredential = this.configuration.lookupCredential('apiKeyQueryParam');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('x_cg_demo_api_key', localVarCredential);
        }

        // authentication (apiKeyAuth) required
        localVarCredential = this.configuration.lookupCredential('apiKeyAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-cg-demo-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/simple/supported_vs_currencies`;
        return this.httpClient.request<Array<string>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Coin Price by Token Addresses
     * This endpoint allows you to **query a token price by using token contract address**.
     * @param id asset platform\&#39;s id  &lt;br&gt;*refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param contractAddresses the contract address of a token
     * @param vsCurrencies target currency of coins, comma-separated if querying more than 1 currency.  &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param includeMarketCap include market capitalization, default: false
     * @param include24hrVol include 24hr volume, default: false
     * @param include24hrChange include 24hr change  default: false
     * @param includeLastUpdatedAt include last updated price time in UNIX , default: false
     * @param precision decimal place for currency price value 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SimpleTokenPrice200Response>;
    public simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SimpleTokenPrice200Response>>;
    public simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SimpleTokenPrice200Response>>;
    public simpleTokenPrice(id: string, contractAddresses: string, vsCurrencies: string, includeMarketCap?: boolean, include24hrVol?: boolean, include24hrChange?: boolean, includeLastUpdatedAt?: boolean, precision?: 'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling simpleTokenPrice.');
        }
        if (contractAddresses === null || contractAddresses === undefined) {
            throw new Error('Required parameter contractAddresses was null or undefined when calling simpleTokenPrice.');
        }
        if (vsCurrencies === null || vsCurrencies === undefined) {
            throw new Error('Required parameter vsCurrencies was null or undefined when calling simpleTokenPrice.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (contractAddresses !== undefined && contractAddresses !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>contractAddresses, 'contract_addresses');
        }
        if (vsCurrencies !== undefined && vsCurrencies !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>vsCurrencies, 'vs_currencies');
        }
        if (includeMarketCap !== undefined && includeMarketCap !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeMarketCap, 'include_market_cap');
        }
        if (include24hrVol !== undefined && include24hrVol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>include24hrVol, 'include_24hr_vol');
        }
        if (include24hrChange !== undefined && include24hrChange !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>include24hrChange, 'include_24hr_change');
        }
        if (includeLastUpdatedAt !== undefined && includeLastUpdatedAt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeLastUpdatedAt, 'include_last_updated_at');
        }
        if (precision !== undefined && precision !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>precision, 'precision');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyQueryParam) required
        localVarCredential = this.configuration.lookupCredential('apiKeyQueryParam');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('x_cg_demo_api_key', localVarCredential);
        }

        // authentication (apiKeyAuth) required
        localVarCredential = this.configuration.lookupCredential('apiKeyAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-cg-demo-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/simple/token_price/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<SimpleTokenPrice200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
